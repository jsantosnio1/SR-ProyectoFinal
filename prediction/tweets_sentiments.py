# -*- coding: utf-8 -*-
"""tweets_sentiments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1usqOMTJyXN8tYUMEa7qVTDKERvZGWRE_
"""



import numpy as np
import pandas as pd 

import os

#!pip install vaderSentiment

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
analyzer = SentimentIntensityAnalyzer()

"""Import the data containing tweets about about comapnies from 2015 to 2020"""

from google.colab import drive
drive.mount('/content/drive')

company_tweets = pd.read_csv("/content/drive/MyDrive/UNIVERSIDAD/8vo/Sistemas de Recomendación con BigData/Tweets about top companies/Company_Tweet.csv")
tweet = pd.read_csv("/content/drive/MyDrive/UNIVERSIDAD/8vo/Sistemas de Recomendación con BigData/Tweets about top companies/Tweet.csv")

company_tweets.head(5)
tweet.head(5)

tweets = pd.merge(company_tweets, tweet, on='tweet_id', how='inner')

tweets.head(5)

sentences = tweets["body"]
sentenceSample = sentences[:10]
sentenceSampleDf=pd.DataFrame(sentenceSample)
sentenceSampleDf

"""### Threshold for negative tweets

"""

def negativityCheck(sentence):
    if(analyzer.polarity_scores(sentence)["neg"]>0.7):
        return 1
    else:
        return 0

sentenceSampleDf["negative"]=pd.DataFrame(sentenceSample.apply(negativityCheck).tolist())

sentenceSampleDf

sentenceSample.head()

tweets.shape

tweets["negative_sentiment"] = sentenceSampleDf["negative"]=pd.DataFrame(sentences.apply(negativityCheck).tolist())

tweets.head(5)

"""### Threshold for positive tweets
A tweet is classified as a positive tweet only if vaderSentiment scores it above 0.7 on positive sentiment.
"""

def positiveCheck(sentence):
    if(analyzer.polarity_scores(sentence)["pos"]>0.7):
        return 1
    else:
        return 0

sentenceSampleDf["positive"]=pd.DataFrame(sentenceSample.apply(positiveCheck).tolist())

sentenceSampleDf

sentenceSample.head()

tweets.shape

tweets["positive_sentiment"] = sentenceSampleDf["positive"]=pd.DataFrame(sentences.apply(positiveCheck).tolist())

tweets.head(5)

"""## Filtering Negative and Positive Tweets"""

negativeTweeets = tweets.loc[tweets["negative_sentiment"]==1]

negativeTweeets.head(5)

positiveTweeets = tweets.loc[tweets["positive_sentiment"]==1]

tweets.ticker_symbol.unique()

"""AMAZON"""

amazonDf = pd.read_csv("/content/drive/MyDrive/UNIVERSIDAD/8vo/Sistemas de Recomendación con BigData/Tweets about top companies/AMZN.csv")

amazonDf.head(5)

"""Negative Tweets Amazon """

negativeTweetsAmazon = negativeTweeets.loc[negativeTweeets['ticker_symbol'] =="AMZN"]

negativeTopUsersTweetsAmazon = negativeTweeets.loc[negativeTweeets['retweet_num'] > 10]

"""Positive Tweets Amazon"""

positiveTweetsAmazon = positiveTweeets.loc[positiveTweeets['ticker_symbol'] =="AMZN"]

positiveTopUsersTweetsAmazon = positiveTweeets.loc[positiveTweeets['retweet_num'] > 10]

"""Positive and Negative Top Users Amazon"""

negativeTopUsersTweetsAmazon.head(5)

positiveTopUsersTweetsAmazon.head(5)

"""Negative And Positive Tweets of Amazon"""

negativeTweetsAmazon.head(5)

positiveTweetsAmazon.head(5)

"""Visualizate setiment of tweets comparate to Nasdaq in the time"""

import datetime

negativeTweetsAmazon['Date'] = pd.to_datetime(negativeTweetsAmazon['post_date'],unit='s').dt.strftime('%d-%m-%Y')

positiveTweetsAmazon['Date'] = pd.to_datetime(positiveTweetsAmazon['post_date'],unit='s').dt.strftime('%d-%m-%Y')

amazonNegativeInfluence= pd.merge(negativeTweetsAmazon,amazonDf,on="Date",how="inner")
amazonPositiveInfluence= pd.merge(positiveTweetsAmazon,amazonDf,on="Date",how="inner")

amazonNegativeInfluence.head(5)

amazonPositiveInfluence.head(5)

negativeTweetsOnAmazonDateCount= negativeTweetsAmazon["Date"].value_counts()
positiveTweetsOnAmazonDateCount= positiveTweetsAmazon["Date"].value_counts()

negativeTweetsOnAmazonDateCount = pd.DataFrame(negativeTweetsOnAmazonDateCount)
negativeTweetsOnAmazonDateCount.reset_index(inplace=True)

positiveTweetsOnAmazonDateCount = pd.DataFrame(positiveTweetsOnAmazonDateCount)
positiveTweetsOnAmazonDateCount.reset_index(inplace=True)

positiveTweetsOnAmazonDateCount.head(5)

negativeTweetsOnAmazonDateCount.head(5)

negativeTweetsOnAmazonDateCount["countNegative"] = negativeTweetsOnAmazonDateCount["Date"]
negativeTweetsOnAmazonDateCount.drop("Date",axis=1,inplace=True)
negativeTweetsOnAmazonDateCount["Date"] = negativeTweetsOnAmazonDateCount["index"]

positiveTweetsOnAmazonDateCount["countPositive"] = positiveTweetsOnAmazonDateCount["Date"]
positiveTweetsOnAmazonDateCount.drop("Date",axis=1,inplace=True)
positiveTweetsOnAmazonDateCount["Date"] = positiveTweetsOnAmazonDateCount["index"]

amazonInfluenceByNo= pd.merge(negativeTweetsOnAmazonDateCount,amazonDf,on="Date",how="inner")

amazonInfluenceByYes= pd.merge(positiveTweetsOnAmazonDateCount,amazonDf,on="Date",how="inner")

amazonInfluenceByNo.head(5)

amazonInfluenceByYes.head(5)

import matplotlib.pyplot as plt

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(15,15))

amazonInfluenceByNo["dateTime"] = pd.to_datetime(amazonInfluenceByNo["Date"])
amazonInfluenceByNo = amazonInfluenceByNo.sort_values(by="dateTime")

amazonInfluenceByYes["dateTime"] = pd.to_datetime(amazonInfluenceByYes["Date"])
amazonInfluenceByYes = amazonInfluenceByYes.sort_values(by="dateTime")  


#openingValues= amazonInfluenceByNo["Open"]
#closingValues = amazonInfluenceByNo["Close"]
countNegativeTweet = amazonInfluenceByNo["countNegative"]
countPositiveTweet = amazonInfluenceByYes["countPositive"]

datesNo = amazonInfluenceByNo["dateTime"]
datesYes = amazonInfluenceByYes["dateTime"]


# ax.plot(dates,openingValues,label="open")
# ax.plot(dates,closingValues,label="close")
ax.plot(datesNo,countNegativeTweet,label="N° of Negative of Tweets")
ax.plot(datesYes,countPositiveTweet,label="N° of Positive of Tweets")

ax.legend()